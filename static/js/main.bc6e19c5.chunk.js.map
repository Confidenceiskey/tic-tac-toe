{"version":3,"sources":["components/EntireBoard/EntireBoard.js","components/Frame/Frame.js","components/GameEndModal/GameEndModal.js","components/ModalPopup/ModalPopup.js","components/ScoreBoard/ScoreBoard.js","components/StartModal/StartModal.js","components/OneSquare/OneSquare.js","components/TicTacBoard/TicTacBoard.js","containers/App.js","serviceWorker.js","index.js"],"names":["EntireBoard","props","react_default","a","createElement","className","children","Frame","GameEndModal","_ref","gameStatus","ModalPopup","concat","modalClassName","hideClassName","gameOverClassName","ScoreBoard","playerClassName","computerClassName","playerScore","computerScore","StartModal","chooseSide","onClick","OneSquare","id","value","TicTacBoard","gameBoard","playerMove","map","boardValue","i","components_OneSquare_OneSquare","key","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","_this$state","state","playerSide","computerSide","clickedSquare","target","currentGameState","toConsumableArray","updateGameBoard","isWinner","updateStatus","updatePlayerScore","includes","setTimeout","computerMove","setState","gameState","playerTurn","allWiningCombos","_i","length","eachWiningLine","result","miniMaxAI","updateComputerScore","side","depth","gameFate","winningChanceValues","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","entries","Symbol","iterator","next","done","_ref3","_ref2","slicedToArray","square","updatedGameState","newSide","push","winningChanceValue","indexNum","err","return","maxWinningChance","reduce","val1","val2","minWinningChance","calculateChanceOfWin","innerHTML","hideElement","restartGame","Array","fill","_this2","_this$state2","components_ModalPopup_ModalPopup","components_StartModal_StartModal","components_GameEndModal_GameEndModal","components_EntireBoard_EntireBoard","components_Frame_Frame","components_ScoreBoard_ScoreBoard","components_TicTacBoard_TicTacBoard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc6e19c5.chunk.js","sourcesContent":["import React from 'react';\nimport './EntireBoard.css';\n\nconst EntireBoard = (props) => {\n\treturn (\n    <div className=\"entireBoard\">\n      {props.children}\n    </div>\n  );\n}\n\nexport default EntireBoard;","import React from 'react';\nimport './Frame.css';\n\nconst Frame = (props) => {\n  return (\n    <div className='frame'> \n      {props.children}\n    </div>\n  );\n}\n\nexport default Frame;","import React from 'react';\nimport './GameEndModal.css';\n\nconst GameEndModal = ({ gameStatus }) => {\n  return (\n    <div className='end-modal'>\n      <p className='winner-text'>{gameStatus}</p>\n    </div>\n  );\n}\n\nexport default GameEndModal;","\nimport React from 'react';\nimport './ModalPopup.css';\n\nconst ModalPopup = (props) => {\n  return (\n    <div className={`modal-outer ${props.modalClassName} ${props.hideClassName} ${props.gameOverClassName}`}> \n      {props.children}\n    </div>\n  );\n}\n\nexport default ModalPopup;","import React from 'react';\nimport './ScoreBoard.css';\n\nconst ScoreBoard = ({ playerClassName, computerClassName, playerScore, computerScore }) => {\n  return (\n    <div className='scoreBoard'>\n      <h3 className={playerClassName}>PLAYER</h3>\n      <h3 className={computerClassName}>COMPUTER</h3>\n      <p className={`scoreTally ${playerClassName}`}>{playerScore}</p>\n      <p className={`scoreTally ${computerClassName}`}>{computerScore}</p>\n    </div>\n  );\n}\n\nexport default ScoreBoard;\n","import React from 'react';\nimport './StartModal.css';\n\nconst StartModal = ({ chooseSide }) => {\n  return (\n    <div className='modal'>\n      <p className='main-text'>SELECT SIDE</p>\n      <p className='side' onClick={chooseSide}>X</p>\n      <p className='side' onClick={chooseSide}>O</p>\n    </div>\n  );\n}\n\nexport default StartModal;","import React from 'react';\nimport './OneSquare.css';\n\nconst OneSquare = ({ id, value, onClick }) => {\n\treturn (\n\t\t<div className=\"each-square\" onClick={onClick}>\n      <p className=\"board-font\" id={id}>{value}</p>\n    </div>\n\t);\n}\n\nexport default OneSquare;","import React from 'react';\nimport './TicTacBoard.css';\nimport OneSquare from '../OneSquare/OneSquare';\n\nconst TicTacBoard = ({ gameBoard, playerMove }) => {\n\treturn (\n    <div className=\"outsideGameArea\">\n      <div className=\"gridLines\">\n        {\n          gameBoard.map((boardValue, i) => {\n            return (\n              <OneSquare\n                key={i+1}\n                id={i}\n                value={gameBoard[i]}\n                onClick={playerMove}\n              />\n            )\n          })\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default TicTacBoard;","import React, { Component } from 'react';\nimport EntireBoard from '../components/EntireBoard/EntireBoard';\nimport Frame from '../components/Frame/Frame';\nimport GameEndModal from '../components/GameEndModal/GameEndModal';\nimport ModalPopup from '../components/ModalPopup/ModalPopup';\nimport ScoreBoard from '../components/ScoreBoard/ScoreBoard';\nimport StartModal from '../components/StartModal/StartModal';\nimport TicTacBoard from '../components/TicTacBoard/TicTacBoard';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      gameBoard: Array(9).fill(\"\"),\n      playerSide: \"\",\n      playerScore: 0,\n      computerSide: \"\",\n      computerScore: 0,\n      playerTurn: true,\n      gameStatus: \"game in play\"\n    }\n  }\n\n  playerMove = (event) => {\n    const { gameBoard, gameStatus, playerSide, \n      computerSide} = this.state;\n    let clickedSquare = event.target.id;\n    let currentGameState = [...gameBoard];\n\n    if (currentGameState[clickedSquare] === '' && gameStatus === \"game in play\") {\n      currentGameState[clickedSquare] = playerSide;\n      this.updateGameBoard(currentGameState);\n      \n      if (this.isWinner(currentGameState) === playerSide) {\n        this.updateStatus(\"You win!\");\n        this.updatePlayerScore();\n\n      } else if (currentGameState.includes('') && gameStatus === \"game in play\") {\n        setTimeout(() => this.computerMove(currentGameState, computerSide), 430);\n      \n      } else {\n        this.setState({\n          gameStatus: \"Draw\"\n        })\n      }\n    } \n  }\n\n  updateGameBoard = (gameState) => {\n    this.setState({\n      gameBoard: gameState,\n      playerTurn: !this.state.playerTurn\n    })\n  }\n\n  isWinner = (gameBoard) => {\n    const allWiningCombos = [\n      [0, 1, 2], [0, 4, 8], [0, 3, 6], [1, 4, 7], \n      [2, 4, 6], [2, 5, 8], [3, 4, 5], [6, 7, 8]\n    ];\n\n    for (const eachWiningLine of allWiningCombos) {\n\n      if (\n        gameBoard[eachWiningLine[0]] === gameBoard[eachWiningLine[1]] && \n        gameBoard[eachWiningLine[0]] === gameBoard[eachWiningLine[2]] &&\n        gameBoard[eachWiningLine[0]] !== \"\"\n      ) {\n        return gameBoard[eachWiningLine[0]];  \n      }\n    }\n\n    if (!gameBoard.includes('')) {\n      return \"draw\";\n    }\n\n    return false;\n  }\n\n  updateStatus = (result) => {\n    this.setState({\n      gameStatus: result,\n    })\n  }\n\n  updatePlayerScore = () => {\n    this.setState({\n      playerScore: this.state.playerScore + 1\n    })\n  }\n\n  computerMove = (currentGameState, computerSide) => {\n    let depth = 0;\n    const bestIndexNum = this.miniMaxAI(currentGameState, computerSide, depth);\n    \n    currentGameState[bestIndexNum] = computerSide;\n    this.updateGameBoard(currentGameState);\n\n    if (this.isWinner(currentGameState) === computerSide) {\n      this.updateStatus(\"You lose!\");\n      this.updateComputerScore();\n    }\n  }\n\n  miniMaxAI = (currentGameState, side, depth) => {\n    const gameFate = this.isWinner(currentGameState);\n    if (gameFate === false) {\n      const winningChanceValues = [];\n\n      for (let [i, square] of currentGameState.entries()) {\n        const updatedGameState = [...currentGameState];\n\n        if (square === '') {\n          updatedGameState[i] = side;\n          const newSide = (side === this.state.playerSide ? this.state.computerSide : this.state.playerSide);\n          const value = this.miniMaxAI(updatedGameState, newSide, depth + 10);\n          winningChanceValues.push({ \n            winningChanceValue: value,\n            indexNum: i  \n          });\n        }\n      }\n\n      if (side === this.state.computerSide) {\n        const maxWinningChance = winningChanceValues.reduce((val1, val2) => {\n          \n          if (val1.winningChanceValue < val2.winningChanceValue) {\n            return val2;\n          } else {\n            return val1;\n          }\n        })\n\n        if (depth === 0) {\n          return maxWinningChance.indexNum;\n        } else {\n          return maxWinningChance.winningChanceValue;\n        }\n\n      } else {\n        const minWinningChance = winningChanceValues.reduce((val1, val2) => {\n          \n          if (val1.winningChanceValue > val2.winningChanceValue) {\n            return val2;\n          } else {\n            return val1;\n          }\n        })\n\n        if (depth === 0) {\n          return minWinningChance.indexNum;\n        } else {\n          return minWinningChance.winningChanceValue;\n        }\n      }\n\n    } else {\n      return this.calculateChanceOfWin(gameFate, side, depth);\n    }\n  }\n\n  calculateChanceOfWin = (gameFate, side, depth) => {\n\n    if (gameFate === \"draw\") {\n      return 0;\n    } else if (gameFate === this.state.playerSide) {\n      return depth - 100;\n    } else if (gameFate === this.state.computerSide) {\n      return 100 - depth;\n    }\n  }\n\n  updateComputerScore = () => {\n    this.setState({\n      computerScore: this.state.computerScore + 1\n    })\n  }\n\n  chooseSide = (event) => {\n    const side = event.target.innerHTML;\n    this.setState({\n      playerSide: side,\n      computerSide: side === \"X\" ? \"O\" : \"X\"\n    })\n  }\n\n  hideElement = (hideClassName) => {\n    return hideClassName += \"hide\";\n  }\n\n  restartGame = () => {\n    this.setState({\n      gameBoard: Array(9).fill(\"\"),\n      gameStatus: \"game in play\",\n      playerTurn: true\n    })\n  }\n\n  render() {\n    const { gameBoard, playerTurn, playerSide, \n      gameStatus, playerScore, computerScore } = this.state;\n\n    const showEndingModal = (text) => {\n      return text;\n    }\n\n    //Visually sets whose turn it is through classNames \n    let computerClassName = '';\n    let playerClassName = '';\n    let gameOverClassName = \"hidden\";\n\n    if (gameStatus === \"game in play\") {\n\n      if (playerTurn === true) {\n        playerClassName += \" currentTurn\";\n\n      } else {\n        computerClassName += \" currentTurn\";\n      }\n\n    } else {\n      computerClassName = \"currentTurn\";\n      playerClassName = \"currentTurn\";\n      gameOverClassName = showEndingModal(\"show\");\n\n      setTimeout(() => {\n        this.restartGame()\n      }, 1350);\n    }\n\n    // Determines when the modal disappears\n    let modalClassName = '';\n    let hideClassName = '';\n\n    if (playerSide !== '') {\n      modalClassName = \"fade\";\n\n      setTimeout(() => {\n        this.hideElement(hideClassName);\n      }, 500);\n    }\n\n    return (\n      <div className=\"App\">\n        <ModalPopup modalClassName={modalClassName} hideClassName={hideClassName}>\n          <StartModal chooseSide={this.chooseSide} />\n        </ModalPopup>\n        <ModalPopup gameOverClassName={gameOverClassName}>\n          <GameEndModal gameStatus={gameStatus}/>\n        </ModalPopup>\n        <header className=\"App-header\">\n          <h1>TIC TAC TOE</h1>\n        </header>\n        <main className=\"App-main\">\n          <EntireBoard>\n            <Frame>\n              <ScoreBoard \n                playerClassName={playerClassName} \n                computerClassName={computerClassName} \n                playerScore={playerScore}\n                computerScore={computerScore}\n              />\n              <TicTacBoard playerMove={this.playerMove} gameBoard={gameBoard} />\n            </Frame>\n          </EntireBoard>\n        </main>\n        <footer className=\"App-footer\">\n          <p>Designed by David Nowak</p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}